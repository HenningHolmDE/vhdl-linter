"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const parser_base_1 = require("./parser-base");
const assignment_parser_1 = require("./assignment-parser");
const objects_1 = require("./objects");
class ProcessParser extends parser_base_1.ParserBase {
    constructor(text, pos, file, parent) {
        super(text, pos, file);
        this.parent = parent;
        this.debug(`start`);
    }
    parse(label) {
        this.expect('(');
        const process = new objects_1.OProcess(this.parent, this.pos.i);
        process.sensitivityList = this.advancePast(')');
        this.maybeWord('is');
        let nextWord = this.getNextWord({ consume: false }).toLowerCase();
        while (nextWord !== 'begin') {
            const variable = new objects_1.OVariable(process, this.pos.i);
            variable.constant = false;
            this.expect('variable');
            variable.name = this.getNextWord();
            let multiSignals = []; // TODO: Fix this!!
            if (this.text[this.pos.i] === ',') {
                multiSignals.push(name);
                this.expect(',');
                continue;
            }
            this.expect(':');
            let type = this.getType();
            if (type.indexOf(':=') > -1) {
                const split = type.split(':=');
                type = split[0].trim();
                variable.defaultValue = split[1].trim();
            }
            for (const multiSignalName of multiSignals) {
                const multiSignal = new objects_1.OVariable(process, -1);
                Object.assign(variable, multiSignal);
                multiSignal.name = multiSignalName;
                process.variables.push(multiSignal);
            }
            process.variables.push(variable);
            multiSignals = [];
            nextWord = this.getNextWord({ consume: false }).toLowerCase();
        }
        this.expect('begin');
        process.statements = this.parseStatements(process, ['end']);
        this.expect('end');
        this.expect('process');
        if (label) {
            this.maybeWord(label);
        }
        this.expect(';');
        return process;
    }
    parseStatements(parent, exitConditions) {
        const statements = [];
        while (this.pos.i < this.text.length) {
            let nextWord = this.getNextWord({ consume: false });
            let label;
            if (this.text.substr(this.pos.i + nextWord.length).match(/^\s*:/)) {
                label = nextWord;
                this.getNextWord(); // consume label
                this.expect(':');
                nextWord = this.getNextWord({ consume: false });
            }
            if (nextWord.toLowerCase() === 'if') {
                statements.push(this.parseIf(parent, label));
            }
            else if (exitConditions.indexOf(nextWord.toLowerCase()) > -1) {
                break;
            }
            else if (nextWord.toLowerCase() === 'case') {
                this.getNextWord();
                statements.push(this.parseCase(parent, label));
            }
            else if (nextWord.toLowerCase() === 'for') {
                statements.push(this.parseFor(parent, label));
            }
            else if (nextWord.toLowerCase() === 'report') {
                this.advancePast(';');
            }
            else {
                const assignmentParser = new assignment_parser_1.AssignmentParser(this.text, this.pos, this.file, parent);
                statements.push(assignmentParser.parse());
            }
        }
        return statements;
    }
    parseFor(parent, label) {
        const forLoop = new objects_1.OForLoop(parent, this.pos.i);
        this.expect('for');
        forLoop.variable = this.getNextWord();
        this.expect('in');
        forLoop.start = this.getNextWord();
        this.expect('to');
        forLoop.end = this.advancePast('loop').trim();
        forLoop.statements = this.parseStatements(forLoop, ['end']);
        this.expect('end');
        this.expect('loop');
        if (label) {
            this.maybeWord(label);
        }
        this.expect(';');
        return forLoop;
    }
    parseIf(parent, label) {
        this.debug(`parseIf`);
        const if_ = new objects_1.OIf(parent, this.pos.i);
        const clause = new objects_1.OIfClause(if_, this.pos.i);
        this.expect('if');
        const position = this.pos.i;
        clause.condition = this.advancePast('then');
        clause.conditionReads = this.tokenize(clause.condition).filter(token => (token.type === 'FUNCTION') || (token.type === 'VARIABLE')).map(token => {
            const read = new objects_1.ORead(clause, position + token.offset);
            read.text = token.value;
            read.begin = position + token.offset;
            read.end = position + token.offset + token.value.length;
            return read;
        });
        clause.statements = this.parseStatements(clause, ['else', 'elsif', 'end']);
        if_.clauses.push(clause);
        let nextWord = this.getNextWord({ consume: false }).toLowerCase();
        while (nextWord === 'elsif') {
            const clause = new objects_1.OIfClause(if_, this.pos.i);
            this.expect('elsif');
            const position = this.pos.i;
            clause.condition = this.advancePast('then');
            clause.conditionReads = this.tokenize(clause.condition).filter(token => (token.type === 'VARIABLE') || (token.type === 'FUNCTION')).map(token => {
                const read = new objects_1.ORead(clause, position + token.offset);
                read.text = token.value;
                read.begin = position + token.offset;
                read.end = position + token.offset + token.value.length;
                return read;
            });
            clause.statements = this.parseStatements(clause, ['else', 'elsif', 'end']);
            if_.clauses.push(clause);
            nextWord = this.getNextWord({ consume: false }).toLowerCase();
        }
        if (nextWord === 'else') {
            this.expect('else');
            if_.elseStatements = this.parseStatements(if_, ['end']);
        }
        this.expect('end');
        this.expect('if');
        if (label) {
            this.maybeWord(label);
        }
        this.expect(';');
        return if_;
    }
    parseCase(parent, label) {
        this.debug(`parseCase ${label}`);
        const case_ = new objects_1.OCase(parent, this.pos.i);
        case_.variable = this.extractReads(case_, this.advancePast(/^\s*is/i), this.pos.i);
        let nextWord = this.getNextWord().toLowerCase();
        while (nextWord === 'when') {
            this.debug(`parseWhen`);
            const whenClause = new objects_1.OWhenClause(case_, this.pos.i);
            whenClause.condition = this.extractReads(whenClause, this.advancePast('=>'), this.pos.i);
            whenClause.statements = this.parseStatements(whenClause, ['when', 'end']);
            case_.whenClauses.push(whenClause);
            nextWord = this.getNextWord().toLowerCase();
        }
        this.expect('case');
        if (label) {
            this.maybeWord(label);
        }
        this.expect(';');
        this.debug(`parseCaseDone ${label}`);
        return case_;
    }
}
exports.ProcessParser = ProcessParser;
//# sourceMappingURL=data:application/json;base64,